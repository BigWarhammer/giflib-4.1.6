CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(giflib C)

# Only enable release and debug builds
IF(CMAKE_CONFIGURATION_TYPES)
  SET(CMAKE_CONFIGURATION_TYPES Debug Release)
  SET(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
    "Reset the configurations to what we need"
    FORCE)
ENDIF()

IF (MSVC)
  IF (${MSVC_VERSION} EQUAL 1600)
    SET(COMPILER "v100") # Visual Studio 2010
  ELSEIF (${MSVC_VERSION} EQUAL 1700)
    SET(COMPILER "v110") # Visual Studio 2012
  ELSEIF (${MSVC_VERSION} EQUAL 1800)
    SET(COMPILER "v120") # Visual Studio 2013
  ELSEIF (${MSVC_VERSION} EQUAL 1900)
    SET(COMPILER "v140") # Visual Studio 2015
  ENDIF()
ENDIF()

IF(MINGW)
  SET(COMPILER "mingw")
ENDIF()

SET(dirname "${COMPILER}-${BITS}")
#SET(GIFLIB_SOURCE_DIR CACHE PATH "Path where to find GIFLIB source")
SET(GIFLIB_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/.." CACHE PATH "Path where to find GIFLIB source")
SET(GIFLIB_VERSION "4.1.6" CACHE STRING "GIFLIB_VERSION")


SET(TARGET_LIB giflib)

SET(GIFLIB_VERSION_FILE "${GIFLIB_SOURCE_DIR}/lib/gif_lib.h")

SET(GIFLIB_PUBLIC_HEADERS
  ${GIFLIB_SOURCE_DIR}/lib/gif_lib.h
)

SET(GIFLIB_PRIVATE_HEADERS
  ${GIFLIB_SOURCE_DIR}/lib/gif_lib_private.h
  ${GIFLIB_SOURCE_DIR}/lib/gif_hash.h
)

SET(GIFLIB_SRCS
  ${GIFLIB_SOURCE_DIR}/lib/dgif_lib.c
  ${GIFLIB_SOURCE_DIR}/lib/egif_lib.c
  ${GIFLIB_SOURCE_DIR}/lib/gif_err.c
  ${GIFLIB_SOURCE_DIR}/lib/gif_font.c
  ${GIFLIB_SOURCE_DIR}/lib/gif_hash.c
  ${GIFLIB_SOURCE_DIR}/lib/gifalloc.c
  ${GIFLIB_SOURCE_DIR}/lib/quantize.c
)

# Add openbsd-reallocarray from 5.1.2 and up
IF(NOT GIFLIB_VERSION VERSION_LESS 5.1.2)
  SET(GIFLIB_SRCS
    ${GIFLIB_SRCS}
    ${GIFLIB_SOURCE_DIR}/lib/openbsd-reallocarray.c
  )
ENDIF()


IF(MSVC)
  # Create file to avoid include file name collision on other platforms
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/unistd.h.in unistd.h @ONLY)  

  # Add unistd.h, getopt.h, getopt.c and stdbool.h for windows build
  # getopt from: http://gist.github.com/ashelly/7776712
  # unistd.h from: http://stackoverflow.com/questions/341817/is-there-a-replacement-for-unistd-h-for-windows-visual-c
  # stdbool.h is just a simple redefinition of bool as int
  SET(GIFLIB_PUBLIC_HEADERS
    ${GIFLIB_PUBLIC_HEADERS}
    ${CMAKE_CURRENT_SOURCE_DIR}/stdbool.h
  )

  SET(GIFLIB_PRIVATE_HEADERS
    ${GIFLIB_PRIVATE_HEADERS}
    ${CMAKE_CURRENT_SOURCE_DIR}/getopt.h
    ${CMAKE_CURRENT_SOURCE_DIR}/unistd.h
  )

  SET(GIFLIB_SRCS
    ${GIFLIB_SRCS}
    ${CMAKE_CURRENT_SOURCE_DIR}/getopt.c
  )
ENDIF(MSVC)


# Dependent include files
INCLUDE_DIRECTORIES(${GIFLIB_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

IF(MSVC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4018 /wd4028 /wd4244 /wd4996")
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_LIB -DWIN32 -DHAVE_STDINT_H -DUINT32=uint32_t -D_OPEN_BINARY -DHAVE_IO_H -DHAVE_FCNTL_H -DHAVE_STDARG_H -D__MSDOS__)
  SET(CMAKE_DEBUG_POSTFIX "d")
ENDIF(MSVC)

IF(MINGW)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_LIB)
ENDIF(MINGW)

ADD_LIBRARY(${TARGET_LIB} STATIC ${GIFLIB_SRCS} ${GIFLIB_PRIVATE_HEADERS} ${GIFLIB_PUBLIC_HEADERS})

IF(MINGW)
  SET_TARGET_PROPERTIES(${TARGET_LIB} PROPERTIES OUTPUT_NAME gif)
ENDIF()

# Runtime equals DLL-files
# Archive equals static libraries
# Library equals module libraries
#IF(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
#  INSTALL(TARGETS ${TARGET_LIB}
#    RUNTIME DESTINATION ${EXECUTABLE_OUTPUT_PATH}
#    LIBRARY DESTINATION ${LIBRARY_OUTPUT_PATH}
#    ARCHIVE DESTINATION ${ARCHIVE_OUTPUT_PATH})
#ENDIF()

#IF(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )
#  INSTALL(FILES ${GIFLIB_PUBLIC_HEADERS} DESTINATION ${INCLUDE_OUTPUT_PATH})
#ENDIF()
